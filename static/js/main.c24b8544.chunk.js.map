{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","quantity","price","percent","_useState2","Object","slicedToArray","values","setValues","ref","React","createRef","subtotal","total","handleInputChange","e","value","target","name","objectSpread","defineProperty","react_default","a","createElement","Main","react_to_pdf_default","targetRef","filename","_ref","toPdf","OptionButton","type","onClick","Pages","Kind","defaultValue","CompanyName","AddressCompany","InformationCompany","TableDate","TableDateHeader","TableDateData","TableDescription","style","width","backgroundColor","className","height","onChange","TableTotal","toFixed","FooterNotes","textAlign","styled","div","_templateObject","_templateObject2","input","_templateObject3","textarea","_templateObject4","_templateObject5","_templateObject6","table","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c24b8544.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Pdf from \"react-to-pdf\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const [values, setValues] = useState({ quantity: 1, price: 2, percent: 12 });\n  const ref = React.createRef();\n  const subtotal = values.quantity * values.price;\n  const percent = (values.percent / 100) * subtotal;\n  const total = subtotal + percent;\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    const name = e.target.name;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <Main>\n      {/* Convert to PDF */}\n      <Pdf targetRef={ref} filename=\"invoice.pdf\">\n        {({ toPdf }) => (\n          <OptionButton type=\"button\" value=\"Download PDF\" onClick={toPdf} />\n        )}\n      </Pdf>\n\n      <Pages ref={ref}>\n        <Kind type=\"text\" defaultValue=\"INVOICE\" />\n        <CompanyName defaultValue=\"Example Co.\" />\n        <AddressCompany\n          defaultValue=\"www.example.com\n          info@example.com\"\n        />\n        <InformationCompany\n          defaultValue=\"Michael Scott Paper Company Inc.\n          1725 Slough Avenue\n          Scranton, Pennsylvania\"\n        />\n        <TableDate>\n          <tbody>\n            <tr>\n              <th>\n                <TableDateHeader type=\"text\" defaultValue=\"Invoice #\" />\n              </th>\n              <td>\n                <TableDateData type=\"text\" defaultValue=\"1\" />\n              </td>\n            </tr>\n\n            <tr>\n              <th>\n                <TableDateHeader type=\"text\" defaultValue=\"Date\" />\n              </th>\n              <td>\n                <TableDateData type=\"text\" defaultValue=\"10 July, 2019\" />\n              </td>\n            </tr>\n          </tbody>\n        </TableDate>\n        <TableDescription>\n          <tbody>\n            <tr>\n              <th style={{ width: \"50%\", backgroundColor: \"#f1f4f3\" }}>\n                <TableDateHeader\n                  type=\"text\"\n                  defaultValue=\"Item & Description\"\n                  style={{ width: \"100%\" }}\n                />\n              </th>\n              <th style={{ backgroundColor: \"#f1f4f3\" }}>\n                <TableDateHeader type=\"text\" defaultValue=\"Quantity\" />\n              </th>\n              <th style={{ backgroundColor: \"#f1f4f3\" }}>\n                <TableDateHeader type=\"text\" defaultValue=\"Price\" />\n              </th>\n            </tr>\n            <tr>\n              <td className=\"description_table_row\" style={{ width: \"100%\" }}>\n                <TableDateData style={{ width: \"100%\", height: \"100%\" }} />\n              </td>\n              <td className=\"description_table_row\">\n                <TableDateData\n                  type=\"number\"\n                  name=\"quantity\"\n                  value={values.quantity}\n                  onChange={handleInputChange}\n                />\n              </td>\n              <td className=\"description_table_row\">\n                <TableDateData\n                  type=\"number\"\n                  name=\"price\"\n                  value={values.price}\n                  onChange={handleInputChange}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </TableDescription>\n\n        <TableTotal>\n          <tbody>\n            <tr>\n              <th className=\"total_table_header\">\n                <TableDateHeader\n                  type=\"text\"\n                  defaultValue=\"Subtotal\"\n                  className=\"total_table\"\n                />\n              </th>\n              <th className=\"total_table_percent\" />\n              <th className=\"total_table_calculate\">{subtotal.toFixed(2)}</th>\n            </tr>\n\n            <tr>\n              <th>\n                <TableDateHeader\n                  type=\"text\"\n                  defaultValue=\"VAT\"\n                  className=\"total_table\"\n                />\n              </th>\n              <th>\n                <TableDateData\n                  name=\"percent\"\n                  type=\"number\"\n                  value={values.percent}\n                  onChange={handleInputChange}\n                  className=\"total_table\"\n                />\n              </th>\n              <th>{percent.toFixed(2)}</th>\n            </tr>\n\n            <tr>\n              <th>\n                <TableDateHeader\n                  type=\"text\"\n                  defaultValue=\"Total\"\n                  className=\"total_table\"\n                />\n              </th>\n              <th>\n                <TableDateData className=\"total_table\" />\n              </th>\n              <th>{total.toFixed(2)}</th>\n            </tr>\n          </tbody>\n        </TableTotal>\n\n        <FooterNotes />\n        <FooterNotes\n          style={{ textAlign: \"right\" }}\n          defaultValue=\"Created with Billable.me\"\n        />\n      </Pages>\n    </Main>\n  );\n}\n\nexport default App;\n\nconst Main = styled.div`\n  width: 22cm;\n  max-width: 840px;\n  background-color: white;\n  margin: 0 auto;\n`;\n\nconst Pages = styled.div`\n  width: 21cm;\n  max-width: 874px;\n  background: #fafbfb;\n  border: 1px solid #f5f7f6;\n  margin: 20px;\n  padding: 13px 0;\n  display: grid;\n  grid-gap: 2vw;\n  grid-template-columns: 50% 45%;\n  grid-template-areas:\n    \"kind kind\"\n    \"name address\"\n    \"information table_date\"\n    \"table_description table_description\"\n    \"total total\"\n    \"footer footer\";\n`;\n\nconst Kind = styled.input`\n  grid-area: kind\n  text-align: center;\n  border: 1px solid #d4d6d9;\n  border-width: 1px 0;\n  padding: 6px 0;\n  color: #2f5756;\n  font-weight: bold;\n  text-transform: uppercase;\n  margin: 0 0 15px 0;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst CompanyName = styled.textarea`\n  grid-area: name\n  overflow: hidden;\n  resize: none;\n  font-size: 3em;\n  height: 110px;\n  border: none;\n  background-color: #fafbfb;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst AddressCompany = styled.textarea`\n  grid-area: address\n  overflow: hidden;\n  text-align: right;\n  resize: none;\n  height: 110px;\n  border: none;\n  background-color: #fafbfb;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst InformationCompany = styled.textarea`\n  grid-area: information\n  overflow: hidden;\n  resize: none;\n  height: 110px;\n  border: none;\n  background-color: #fafbfb;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst TableDate = styled.table`\n  grid-area: table_date\n  border: 1px solid #ced5d2;\n  border-collapse: collapse;\n  table-layout: auto;\n  width: 1px;\n`;\n\nconst TableDateHeader = styled.input`\n  border: none;\n  padding: 6px 0;\n  color: #2f5756;\n  font-weight: bold;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst TableDateData = styled.input`\n  border: none;\n  padding: 6px 0;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n\nconst TableDescription = styled.table`\n  grid-area: table_description\n  border: 1px solid #ced5d2;\n  border-collapse: collapse;\n`;\n\nconst TableTotal = styled.table`\n  grid-area: total\n  width: 35%\n  margin-left: 58%;\n  border: 1px solid #ced5d2;\n  border-collapse: collapse;\n`;\n\nconst OptionButton = styled.input`\n  height: 26px;\n  line-height: 26px;\n  padding: 0 16px;\n  text-decoration: none;\n  background: #fff;\n  color: #93b8b3;\n  margin: 0 5px 0 0;\n  border: 1px solid #93b8b3;\n  border-radius: 0.5em;\n  cursor: pointer;\n`;\n\nconst FooterNotes = styled.textarea`\n  grid-ares: footer;\n  color: #bebebe;\n  font-size: 0.9em;\n  padding-bottom: 9px;\n  resize: none;\n  border: none;\n  background-color: #fafbfb;\n\n  &:hover {\n    background-color: rgb(249, 245, 198);\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}